!function(e){var o={};function t(n){if(o[n])return o[n].exports;var r=o[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=e,t.c=o,t.d=function(e,o,n){t.o(e,o)||Object.defineProperty(e,o,{enumerable:!0,get:n})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,o){if(1&o&&(e=t(e)),8&o)return e;if(4&o&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&o&&"string"!=typeof e)for(var r in e)t.d(n,r,function(o){return e[o]}.bind(null,r));return n},t.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(o,"a",o),o},t.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},t.p="",t(t.s=0)}([function(e,o){var t={firstName:"Alice",lastName:"Abdul",fullTimeEmployee:!0,yearsOfExperience:10,location:"Lagos",contract:!0},n={firstName:"Bob",lastName:"Johnson",fullTimeEmployee:!1,location:"Akra, Ghana"};console.log("Teacher 1:",t),console.log("Teacher 2:",{firstName:"Emmanuel",lastName:"Johnson",fullTimeEmployee:!1,location:"Abuja"}),console.log("Teacher 3:",n),console.log("Teacher 1 has contract:",t.contract),console.log("Teacher 3 has no contract:",n.contact),console.log("Director 1:",{firstName:"Charles",lastName:"David",fullTimeEmployee:!0,yearsOfExperience:15,location:"Lagos",numberOfReports:8,bonus:5e3}),console.log("Director 2:",{firstName:"Diana",lastName:"Evans",fullTimeEmployee:!1,location:"Berlin",numberOfReports:3})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vanMvbWFpbi50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInRlYWNoZXIxIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJmdWxsVGltZUVtcGxveWVlIiwieWVhcnNPZkV4cGVyaWVuY2UiLCJsb2NhdGlvbiIsImNvbnRyYWN0IiwidGVhY2hlcjMiLCJjb25zb2xlIiwibG9nIiwiY29udGFjdCIsIm51bWJlck9mUmVwb3J0cyIsImJvbnVzIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FGQTFCLEVBQW9Ca0IsRUFBRU8sR0FDdEJYLE9BQU9DLGVBQWVVLEVBQUksVUFBVyxDQUFFVCxZQUFZLEVBQU1LLE1BQU9BLElBQ3RELEVBQVBFLEdBQTRCLGlCQUFURixFQUFtQixJQUFJLElBQUlNLEtBQU9OLEVBQU9yQixFQUFvQlUsRUFBRWUsRUFBSUUsRUFBSyxTQUFTQSxHQUFPLE9BQU9OLEVBQU1NLElBQVFDLEtBQUssS0FBTUQsSUFDOUksT0FBT0YsR0FJUnpCLEVBQW9CNkIsRUFBSSxTQUFTMUIsR0FDaEMsSUFBSVMsRUFBU1QsR0FBVUEsRUFBT3FCLFdBQzdCLFdBQXdCLE9BQU9yQixFQUFnQixTQUMvQyxXQUE4QixPQUFPQSxHQUV0QyxPQURBSCxFQUFvQlUsRUFBRUUsRUFBUSxJQUFLQSxHQUM1QkEsR0FJUlosRUFBb0JhLEVBQUksU0FBU2lCLEVBQVFDLEdBQVksT0FBT2pCLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS3VCLEVBQVFDLElBR3pHL0IsRUFBb0JrQyxFQUFJLEdBSWpCbEMsRUFBb0JBLEVBQW9CbUMsRUFBSSxHLGdCQzlEckQsSUFBTUMsRUFBb0IsQ0FDeEJDLFVBQVcsUUFDWEMsU0FBVSxRQUNWQyxrQkFBa0IsRUFDbEJDLGtCQUFtQixHQUNuQkMsU0FBVSxRQUNWQyxVQUFVLEdBVU5DLEVBQW9CLENBQ3hCTixVQUFXLE1BQ1hDLFNBQVUsVUFDVkMsa0JBQWtCLEVBQ2xCRSxTQUFVLGVBNEJaRyxRQUFRQyxJQUFJLGFBQWNULEdBQzFCUSxRQUFRQyxJQUFJLGFBeENjLENBQ3hCUixVQUFXLFdBQ1hDLFNBQVUsVUFDVkMsa0JBQWtCLEVBQ2xCRSxTQUFVLFVBcUNaRyxRQUFRQyxJQUFJLGFBQWNGLEdBRzFCQyxRQUFRQyxJQUFJLDBCQUEyQlQsRUFBU00sVUFDaERFLFFBQVFDLElBQUksNkJBQThCRixFQUFTRyxTQUVuREYsUUFBUUMsSUFBSSxjQTlCaUIsQ0FDM0JSLFVBQVcsVUFDWEMsU0FBVSxRQUNWQyxrQkFBa0IsRUFDbEJDLGtCQUFtQixHQUNuQkMsU0FBVSxRQUNWTSxnQkFBaUIsRUFDakJDLE1BQU8sTUF3QlRKLFFBQVFDLElBQUksY0FyQmlCLENBQzNCUixVQUFXLFFBQ1hDLFNBQVUsUUFDVkMsa0JBQWtCLEVBQ2xCRSxTQUFVLFNBQ1ZNLGdCQUFpQiIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCIvKipcclxuICogSW50ZXJmYWNlIHJlcHJlc2VudGluZyBhIHRlYWNoZXIncyBpbmZvcm1hdGlvbi5cclxuICovXHJcbmludGVyZmFjZSBUZWFjaGVyIHtcclxuICByZWFkb25seSBmaXJzdE5hbWU6IHN0cmluZzsgLy8gRmlyc3QgbmFtZSBvZiB0aGUgdGVhY2hlciAocmVhZC1vbmx5KVxyXG4gIHJlYWRvbmx5IGxhc3ROYW1lOiBzdHJpbmc7ICAvLyBMYXN0IG5hbWUgb2YgdGhlIHRlYWNoZXIgKHJlYWQtb25seSlcclxuICBmdWxsVGltZUVtcGxveWVlOiBib29sZWFuOyAvLyBJbmRpY2F0ZXMgaWYgdGhlIHRlYWNoZXIgaXMgYSBmdWxsLXRpbWUgZW1wbG95ZWVcclxuICB5ZWFyc09mRXhwZXJpZW5jZT86IG51bWJlcjsgLy8gT3B0aW9uYWw6IE51bWJlciBvZiB5ZWFycyBvZiBleHBlcmllbmNlXHJcbiAgbG9jYXRpb246IHN0cmluZzsgICAgICAgICAgLy8gTG9jYXRpb24gb2YgdGhlIHRlYWNoZXJcclxuICBba2V5OiBzdHJpbmddOiBhbnk7ICAgICAgICAvLyBBbGxvdyBmb3IgYXJiaXRyYXJ5IGFkZGl0aW9uYWwgcHJvcGVydGllc1xyXG59XHJcblxyXG5pbnRlcmZhY2UgRGlyZWN0b3JzIGV4dGVuZHMgVGVhY2hlciB7XHJcbiAgbnVtYmVyT2ZSZXBvcnRzOiBudW1iZXI7IC8vIFJlcXVpcmVkIGF0dHJpYnV0ZSBzcGVjaWZpYyB0byBEaXJlY3RvcnNcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBFeGFtcGxlIHRlYWNoZXIgZGF0YSBmb2xsb3dpbmcgdGhlIFRlYWNoZXIgaW50ZXJmYWNlLlxyXG4gKi9cclxuY29uc3QgdGVhY2hlcjE6IFRlYWNoZXIgPSB7XHJcbiAgZmlyc3ROYW1lOiBcIkFsaWNlXCIsXHJcbiAgbGFzdE5hbWU6IFwiQWJkdWxcIixcclxuICBmdWxsVGltZUVtcGxveWVlOiB0cnVlLFxyXG4gIHllYXJzT2ZFeHBlcmllbmNlOiAxMCxcclxuICBsb2NhdGlvbjogXCJMYWdvc1wiLFxyXG4gIGNvbnRyYWN0OiB0cnVlLCAvLyBFeGFtcGxlIG9mIGFuIGFyYml0cmFyeSBhZGRpdGlvbmFsIHByb3BlcnR5XHJcbn07XHJcblxyXG5jb25zdCB0ZWFjaGVyMjogVGVhY2hlciA9IHtcclxuICBmaXJzdE5hbWU6IFwiRW1tYW51ZWxcIixcclxuICBsYXN0TmFtZTogXCJKb2huc29uXCIsXHJcbiAgZnVsbFRpbWVFbXBsb3llZTogZmFsc2UsXHJcbiAgbG9jYXRpb246IFwiQWJ1amFcIixcclxufTtcclxuXHJcbmNvbnN0IHRlYWNoZXIzOiBUZWFjaGVyID0ge1xyXG4gIGZpcnN0TmFtZTogXCJCb2JcIixcclxuICBsYXN0TmFtZTogXCJKb2huc29uXCIsXHJcbiAgZnVsbFRpbWVFbXBsb3llZTogZmFsc2UsXHJcbiAgbG9jYXRpb246IFwiQWtyYSwgR2hhbmFcIixcclxufTtcclxuXHJcblxyXG4vLyAtLS0gRXhhbXBsZSBVc2FnZSAoZm9yIGRlbW9uc3RyYXRpb24gYW5kIHR5cGUgY2hlY2tpbmcpIC0tLVxyXG5cclxuY29uc3QgZGlyZWN0b3IxOiBEaXJlY3RvcnMgPSB7XHJcbiAgZmlyc3ROYW1lOiBcIkNoYXJsZXNcIixcclxuICBsYXN0TmFtZTogXCJEYXZpZFwiLFxyXG4gIGZ1bGxUaW1lRW1wbG95ZWU6IHRydWUsXHJcbiAgeWVhcnNPZkV4cGVyaWVuY2U6IDE1LFxyXG4gIGxvY2F0aW9uOiBcIkxhZ29zXCIsXHJcbiAgbnVtYmVyT2ZSZXBvcnRzOiA4LFxyXG4gIGJvbnVzOiA1MDAwIC8vIEFsbG93ZWQgYnkgdGhlIGluZGV4IHNpZ25hdHVyZSBpbmhlcml0ZWQgZnJvbSBUZWFjaGVyXHJcbn07XHJcblxyXG5jb25zdCBkaXJlY3RvcjI6IERpcmVjdG9ycyA9IHtcclxuICBmaXJzdE5hbWU6IFwiRGlhbmFcIixcclxuICBsYXN0TmFtZTogXCJFdmFuc1wiLFxyXG4gIGZ1bGxUaW1lRW1wbG95ZWU6IGZhbHNlLCAvLyBEaXJlY3RvcnMgY2FuIGFsc28gYmUgcGFydC10aW1lIGFzIHBlciBUZWFjaGVyIGludGVyZmFjZVxyXG4gIGxvY2F0aW9uOiBcIkJlcmxpblwiLFxyXG4gIG51bWJlck9mUmVwb3J0czogMyxcclxufTtcclxuXHJcblxyXG4vLyBFeGFtcGxlIDM6IERlbW9uc3RyYXRpbmcgcmVhZG9ubHkgcHJvcGVydHkgKHdpbGwgY2F1c2UgYSBUeXBlU2NyaXB0IGVycm9yKVxyXG4vLyB0ZWFjaGVyMS5sYXN0TmFtZSA9IFwiQWJ1YmFrYXJcIjsgLy8gRXJyb3I6IENhbm5vdCBhc3NpZ24gdG8gJ2xhc3ROYW1lJyBiZWNhdXNlIGl0IGlzIGEgcmVhZC1vbmx5IHByb3BlcnR5LlxyXG5cclxuY29uc29sZS5sb2coXCJUZWFjaGVyIDE6XCIsIHRlYWNoZXIxKTtcclxuY29uc29sZS5sb2coXCJUZWFjaGVyIDI6XCIsIHRlYWNoZXIyKTtcclxuY29uc29sZS5sb2coXCJUZWFjaGVyIDM6XCIsIHRlYWNoZXIzKTtcclxuXHJcbi8vIFlvdSBjYW4gYWNjZXNzIGFkZGl0aW9uYWwgcHJvcGVydGllcyBkaXJlY3RseVxyXG5jb25zb2xlLmxvZyhcIlRlYWNoZXIgMSBoYXMgY29udHJhY3Q6XCIsIHRlYWNoZXIxLmNvbnRyYWN0KTtcclxuY29uc29sZS5sb2coXCJUZWFjaGVyIDMgaGFzIG5vIGNvbnRyYWN0OlwiLCB0ZWFjaGVyMy5jb250YWN0KTtcclxuXHJcbmNvbnNvbGUubG9nKFwiRGlyZWN0b3IgMTpcIiwgZGlyZWN0b3IxKTtcclxuY29uc29sZS5sb2coXCJEaXJlY3RvciAyOlwiLCBkaXJlY3RvcjIpOyJdLCJzb3VyY2VSb290IjoiIn0=